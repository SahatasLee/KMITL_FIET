basePath: /api/v1
definitions:
  model.Credential:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: supersecure123
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  model.PublicUser:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  model.TokenResponse:
    properties:
      token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is Fiet.
  title: Fiet API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.Credential'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/model.TokenResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid email or password
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login User
      tags:
      - user
  /ping:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: hello world
          schema:
            type: string
      summary: ping
      tags:
      - ping
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.Credential'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "409":
          description: User already exists
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create User
      tags:
      - user
  /user:
    get:
      consumes:
      - application/json
      description: Retrieve user details by UUID from JWT
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PublicUser'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get User by UUID
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update user details by UUID from JWT
      parameters:
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.PublicUser'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            type: string
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Failed to update user
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.PublicUser'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
      Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
